from collections import deque


# Given a word, write a function to generate all of its unique generalized abbreviations.
# A generalized abbreviation of a word can be generated by replacing each substring of the word with
# the count of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”.
# After replacing these substrings in the actual word by the count of characters,
# we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
# Note: All contiguous characters should be considered one substring, e.g.,
# we can’t take “a” and “b” as substrings to get “11”; since “a” and “b” are contiguous,
# we should consider them together as one substring to get an abbreviation “2”.
def generate_generalized_abbreviation(word):
    result = deque()
    result.append("")

    for ch in word:
        s = len(result)
        for _ in range(s):
            combination = result.popleft()
            result.append(combination + ch)

            if len(combination) > 0 and combination[-1].isdigit():
                result.append(combination[:-1] + str(int(combination[-1]) + 1))
            else:
                result.append(combination + "1")

    return result


if __name__ == '__main__':

    print("Generalized abbreviation are: " +
          str(generate_generalized_abbreviation("BAT")))
    print("Generalized abbreviation are: " +
          str(generate_generalized_abbreviation("code")))

